
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/blog_lucas_jandrey/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("admin")
  firstName     String?
  lastName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String?  @db.Text
  content     String   @db.Text
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  featuredImage String?
  readTime    Int?     @default(5)
  tags        String[] @default([])
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
  
  views    PostView[]

  @@map("posts")
}

model PostView {
  id           String   @id @default(cuid())
  postId       String
  ipAddress    String
  userAgent    String
  fingerprint  String   // IP + UserAgent hash for unique identification
  viewedAt     DateTime @default(now())
  
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([postId, fingerprint])
  @@map("post_views")
}
